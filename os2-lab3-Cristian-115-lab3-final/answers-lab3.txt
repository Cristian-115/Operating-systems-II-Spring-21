1.what  is the purpose of having an individual handler function for each exception/interrupt?
    (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists
    in the current implementation could not be provided?)

    If we only had one handler for all exceptions or interupts then we would only get one error for multiple different interrupts. We have individual handlers so we can easily determine what exception was triggered. This way we can decide how we will handle the exceptions.

2. . Did you have to do anything to make the user/softint program behave correctly? The grade
script expects it to produce a general protection fault (trap 13), but softint’s code
says int $14. Why should this produce interrupt vector 13? What happens if the kernel
actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which
is interrupt vector 14)?

I did not have to do anything to make the soft int behave correctly. Vector 13 is produced  as a protection, a user should not be able to call interupt 14. If this was allowed under the kernel then a applicatcation could  execute kernal privleges. In order to prevent this we just call interupt 13.


3. The break point test case will either generate a break point exception or a general
protection fault depending on how you initialized the break point entry in the IDT (i.e., your
call to SETGATE from trap_init). Why? How do you need to set it up in order to get the
breakpoint exception to work as specified above and what incorrect setup would cause it to
trigger a general protection fault?

If we set the last perameter in the setgate function to 0 then it would cause a general protection fault. This is incorrect behavior, so instead we set it to 3. The interupt 3 causes a breakpoint exception which is what we want.

4. What do you think is the point of these mechanisms, particularly in light of what
the user/softint test program does?
  
  These mechinisims are in place to protect the kernel from user interference. This prevents users from calling certain inturrupt handlers. For example when user/softint tries to generate a page fault(kernel privlege level) the kernel will instead invoke a general protection fault.